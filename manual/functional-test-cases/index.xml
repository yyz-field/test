<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional test cases on Longhorn Manual Test Cases</title>
    <link>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/</link>
    <description>Recent content in Functional test cases on Longhorn Manual Test Cases</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Deployment of Longhorn</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/deployment/</guid>
      <description>Installation Longhorn v1.1.2 and above - Support Kubernetes 1.18+&#xA;Longhorn v1.0.0 to v1.1.1 - Support Kubernetes 1.14+. Default 1.16+&#xA;Install using Rancher Apps &amp;amp; MarketPlace App (Default)&#xA;Install using Helm chart from https://github.com/longhorn/longhorn/tree/master/chart&#xA;Install using YAML from https://github.com/longhorn/longhorn/blob/master/deploy/longhorn.yaml&#xA;Note: Longhorn UI can scale to multiple instances for HA purposes.&#xA;Uninstallation Make sure all the CRDs and other resources are cleaned up, following the uninstallation instruction. https://longhorn.io/docs/1.2.2/deploy/uninstall/&#xA;Customizable Default Settings https://longhorn.io/docs/1.2.2/references/settings/</description>
    </item>
    <item>
      <title>2. UI</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/ui/</guid>
      <description>Accessibility of Longhorn UI # Test Case Test Instructions 1. Access Longhorn UI using rancher proxy 1. Create a cluster (3 worker nodes and 1 etcd/control plane) in rancher, Go to the default project.&#xA;2. Go to App, Click the launch app.&#xA;3. Select longhorn.&#xA;4. Select Rancher-Proxy under the Longhorn UI service.&#xA;5. Once the app is deployed successfully, click the /index.html link appears in App page.&#xA;6. The page should redirect to longhorn UI - https://rancher/k8s/clusters/c-aaaa/api/v1/namespaces/longhorn-system/services/http:longhorn-frontend:80/proxy/#/dashboard</description>
    </item>
    <item>
      <title>3. Volume</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/volume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/volume/</guid>
      <description>Test cases for Volume # Test Case Test Instructions Expected Results 1 Check volume Details Prerequisite:&#xA;* Longhorn Nodes has node tags&#xA;* Node Disks has disk tags&#xA;* Backup target is set to NFS server, or S3 compatible target&#xA;1. Create a workload using Longhorn volume&#xA;2. Check volume details page&#xA;3. Create volume backup * Volume Details&#xA;* State should be Attached&#xA;* Health should be healthy&#xA;* Frontend should be Block Device</description>
    </item>
    <item>
      <title>5. Kubernetes</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/kubernetes/</guid>
      <description>Dynamic provisioning with StorageClass Can create and use volume using StorageClass&#xA;Can create a new StorageClass use new parameters and it will take effect on the volume created by the storage class.&#xA;If the PV reclaim policy is delete, once PVC and PV are deleted, Longhorn volume should be deleted.&#xA;Static provisioning using Longhorn created PV/PVC PVC can be used by the new workload&#xA;Delete the PVC will not result in PV deletion</description>
    </item>
    <item>
      <title>6. Backup</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/backup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/backup/</guid>
      <description>Automation Tests # Test name Description tag 1 test_backup Test basic backup&#xA;Setup:&#xA;1. Create a volume and attach to the current node&#xA;2. Run the test for all the available backupstores.&#xA;Steps:&#xA;1. Create a backup of volume&#xA;2. Restore the backup to a new volume&#xA;3. Attach the new volume and make sure the data is the same as the old one&#xA;4. Detach the volume and delete the backup.</description>
    </item>
    <item>
      <title>7. Node</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/node/</guid>
      <description>UI specific test cases # Test Case Test Instructions Expected Results 1 Storage details * Prerequisites&#xA;* Longhorn Installed&#xA;1. Verify the allocated/used storage show the right data in node details page.&#xA;2. Create a volume of 20 GB and attach to a pod and verify the storage allocated/used is shown correctly. Without any volume, allocated should be 0 and on creating new volume it should be updated as per volume present.</description>
    </item>
    <item>
      <title>8. Scheduling</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/scheduling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/scheduling/</guid>
      <description>Manual Test Test name Prerequisite Expectation EKS across zone scheduling Prerequisite:&#xA;* EKS Cluster with 3 nodes across two AWS zones (zone#1, zone#2)&#xA;1. Create a volume with 2 replicas, and attach it to a node.&#xA;2. Delete a replica scheduled to each zone, repeat it few times&#xA;3. Scale volume replicas = 3&#xA;4. Scale volume replicas to 4 * Volume replicas should be scheduled one per AWS zone</description>
    </item>
    <item>
      <title>9. Upgrade</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/upgrade/</guid>
      <description># Test name Description 1 Higher version of Longhorn engine and lower version of volume Test Longhorn upgrade&#xA;1. Create a volume, generate and write data into the volume.&#xA;2. Keep the volume attached, then upgrade Longhorn system.&#xA;3. Write data in volume.&#xA;4. Take snapshot#1. Compute the checksum#1&#xA;5. Write data to volume. Compute the checksum#2&#xA;6. Take backup&#xA;7. Revert to snapshot#1&#xA;8. Restore the backup. 2 Restore the backup taken with older engine version 1.</description>
    </item>
    <item>
      <title>Monitoring</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/functional-test-cases/monitoring/</guid>
      <description>Prometheus Support test cases Install the Prometheus Operator (include a role and service account for it). For example:apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: prometheus-operator namespace: default roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: prometheus-operator subjects:&#xA;- kind: ServiceAccount name: prometheus-operator namespace: default&#xA;&amp;ndash; apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: prometheus-operator namespace: default rules:&#xA;- apiGroups:&#xA;- extensions resources:&#xA;- thirdpartyresources verbs: [&amp;quot;&amp;quot;]&#xA;- apiGroups:&#xA;- apiextensions.k8s.io resources:&#xA;- customresourcedefinitions verbs: [&amp;quot;&amp;quot;]</description>
    </item>
  </channel>
</rss>
