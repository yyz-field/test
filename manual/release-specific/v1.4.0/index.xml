<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>v1.4.0 on Longhorn Manual Test Cases</title>
    <link>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/</link>
    <description>Recent content in v1.4.0 on Longhorn Manual Test Cases</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Test CSI plugin liveness probe</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-csi-plugin-liveness-probe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-csi-plugin-liveness-probe/</guid>
      <description>&lt;h2 id=&#34;related-discussion&#34;&gt;Related discussion&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/longhorn/longhorn/issues/3907&#34;&gt;https://github.com/longhorn/longhorn/issues/3907&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;test-csi-plugin-liveness-probe-should-recover-csi-socket-file&#34;&gt;Test CSI plugin liveness probe should recover CSI socket file&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; healthy Longhorn cluster&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt; delete the Longhorn CSI socket file on one of the node(&lt;code&gt;node-1&lt;/code&gt;).&#xA;&lt;code&gt;rm /var/lib/kubelet/plugins/driver.longhorn.io/csi.sock&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt; the &lt;code&gt;longhorn-csi-plugin-*&lt;/code&gt; pod on &lt;code&gt;node-1&lt;/code&gt; should be restarted.&lt;/p&gt;&#xA;&lt;p&gt;And the &lt;code&gt;csi-provisioner-*&lt;/code&gt; pod on &lt;code&gt;node-1&lt;/code&gt; should be restarted.&lt;br&gt;&#xA;And the &lt;code&gt;csi-resizer-*&lt;/code&gt;     pod on &lt;code&gt;node-1&lt;/code&gt; should be restarted.&lt;br&gt;&#xA;And the &lt;code&gt;csi-snapshotter-*&lt;/code&gt; pod on &lt;code&gt;node-1&lt;/code&gt; should be restarted.&lt;br&gt;&#xA;And the &lt;code&gt;csi-attacher-*&lt;/code&gt;    pod on &lt;code&gt;node-1&lt;/code&gt; should be restarted.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test engine binary recovery</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-engine-binary-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-engine-binary-recovery/</guid>
      <description>&lt;h2 id=&#34;related-issue&#34;&gt;Related issue&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/longhorn/longhorn/issues/4380&#34;&gt;https://github.com/longhorn/longhorn/issues/4380&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;&#xA;&lt;h3 id=&#34;test-remove-engine-binary-on-host-should-recover&#34;&gt;Test remove engine binary on host should recover&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; EngineImage custom resource deployed&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; kubectl -n longhorn-system get engineimage&#xA;NAME          STATE      IMAGE                                    REFCOUNT   BUILDDATE   AGE&#xA;ei-b907910b   deployed   longhornio/longhorn-engine:master-head   0          3d23h       2m25s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And engine image pods &lt;code&gt;Ready&lt;/code&gt; are &lt;code&gt;1/1&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; kubectl -n longhorn-system get pod | grep engine-image&#xA;engine-image-ei-b907910b-g4kpd  1/1   Running   0   2m43s&#xA;engine-image-ei-b907910b-46k6t  1/1   Running   0   2m43s&#xA;engine-image-ei-b907910b-t6wnd  1/1   Running   0   2m43s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt; Delete engine binary on host&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test filesystem trim</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-filesystem-trim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-filesystem-trim/</guid>
      <description>&lt;h2 id=&#34;related-issue&#34;&gt;Related issue&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/longhorn/longhorn/issues/836&#34;&gt;https://github.com/longhorn/longhorn/issues/836&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;case-1-test-filesystem-trim-during-writing&#34;&gt;Case 1: Test filesystem trim during writing&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; A 10G volume created.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Volume attached to &lt;code&gt;node-1&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Make a filesystem like EXT4 or XFS for the volume.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Mount the filesystem on a mount point.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt; Run the below shell script with the correct mount point specified:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MOUNT_POINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/urandom of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/mnt/data bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1M count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sync&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CKSUM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;md5sum /mnt/data | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; INDEX in &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1..10..1&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rm -rf &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MOUNT_POINT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/mnt/data of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MOUNT_POINT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/data &amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  RAND_SLEEP_INTERVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(($((&lt;/span&gt;$RANDOM&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sleep &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RAND_SLEEP_INTERVAL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fstrim &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MOUNT_POINT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;ps aux | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dd if&amp;#34;&lt;/span&gt; | grep -v grep | wc -l&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; -eq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CUR_CKSUM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;md5sum &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MOUNT_POINT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/data | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $CUR_CKSUM !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $CKSUM &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;invalid file found, expected checksum &lt;/span&gt;$CKSUM&lt;span style=&#34;color:#e6db74&#34;&gt;, current checksum &lt;/span&gt;$CUR_CKSUM&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rm -f &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MOUNT_POINT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt; The script execution should succeed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test helm on Rancher deployed Windows Cluster</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-helm-install-on-rancher-deployed-windows-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-helm-install-on-rancher-deployed-windows-cluster/</guid>
      <description>&lt;h2 id=&#34;related-issue&#34;&gt;Related issue&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/longhorn/longhorn/issues/4246&#34;&gt;https://github.com/longhorn/longhorn/issues/4246&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;test-install&#34;&gt;Test Install&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; Rancher cluster.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; 3 new instances for the Windows cluster following &lt;a href=&#34;https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/rke-clusters/windows-clusters/#architecture-requirements&#34;&gt;Architecture Requirements&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; docker installed on the 3 Windows cluster instances.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; &lt;a href=&#34;https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/rke-clusters/windows-clusters/host-gateway-requirements/#disabling-private-ip-address-checks&#34;&gt;Disabled Private IP Address Checks&lt;/a&gt; for the 3 Windows cluster instances.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Created new &lt;code&gt;Custom&lt;/code&gt; Windows cluster with Rancher.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Select &lt;code&gt;Flannel&lt;/code&gt; for &lt;code&gt;Network Provider&lt;/code&gt; &lt;br&gt;&#xA;Enable &lt;code&gt;Windows Support&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Added the 3 nodes to the Rancher Windows cluster.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/rke-clusters/windows-clusters/#add-linux-master-node&#34;&gt;Add Linux Master Node&lt;/a&gt;&lt;br&gt;&#xA;&lt;a href=&#34;https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/rke-clusters/windows-clusters/#add-linux-master-node&#34;&gt;Add Linux Worker Node&lt;/a&gt;&lt;br&gt;&#xA;&lt;a href=&#34;https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/rke-clusters/windows-clusters/#add-a-windows-worker-node&#34;&gt;Add Windows Worker Node&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test Longhorn system backup should sync from the remote backup target</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-system-backup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-system-backup/</guid>
      <description>&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; Custom resource SystemBackup (foo) exist in AWS S3,&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; System backup (foo) downloaded from AWS S3.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Custom resource SystemBackup (foo) deleted.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt; Upload the system backup (foo) to AWS S3.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Create a new custom resource SystemBackup(foo).&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This needs to be done before the system backup gets synced to the cluster.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt; Should see the synced messages in the custom resource SystemBackup(foo).&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Events:&#xA;  Type    Reason   Age    From                               Message&#xA;  ----    ------   ----   ----                               -------&#xA;  Normal  Syncing  9m29s  longhorn-system-backup-controller  Syncing system backup from backup target&#xA;  Normal  Synced   9m28s  longhorn-system-backup-controller  Synced system backup from backup target&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Test Node ID Change During Backing Image Creation</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-node-id-change-during-backing-image-creation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-node-id-change-during-backing-image-creation/</guid>
      <description>&lt;h2 id=&#34;related-issue&#34;&gt;Related issue&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/longhorn/longhorn/issues/4887&#34;&gt;https://github.com/longhorn/longhorn/issues/4887&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; A relatively large file so that uploading it would take several minutes at least.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Upload the file as a backing image.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Monitor the longhorn manager pod logs.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt; Add new nodes for the cluster or new disks for the existing Longhorn nodes during the upload.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt; Should see the upload success.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Should not see error messages like below in the longhorn manager pods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test Online Expansion</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-online-expansion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-online-expansion/</guid>
      <description>&lt;h2 id=&#34;related-issue&#34;&gt;Related issue&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/longhorn/longhorn/issues/1674&#34;&gt;https://github.com/longhorn/longhorn/issues/1674&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;test-online-expansion-with-continuous-readingwriting&#34;&gt;Test online expansion with continuous reading/writing&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; Prepare a relatively large file (5Gi for example) with the checksum calculated.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Create and attach a volume.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Monitor the instance manager pod logs.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt; Use &lt;code&gt;dd&lt;/code&gt; to copy data from the file to the Longhorn block device.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dd if=/mnt/data of=/dev/longhorn/vol bs=1M&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Do online expansion for the volume during the copying.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt; The expansion should success. The corresponding block device on the attached node is expanded.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test replica scale-down warning</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-replica-scale-down-warning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-replica-scale-down-warning/</guid>
      <description>&lt;h2 id=&#34;related-issue&#34;&gt;Related issue&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/longhorn/longhorn/issues/4120&#34;&gt;https://github.com/longhorn/longhorn/issues/4120&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; &lt;code&gt;Replica Auto Balance&lt;/code&gt; set to &lt;code&gt;least-effort&lt;/code&gt; or &lt;code&gt;best-effort&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Volume with 3 replicas created.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Volume attached to &lt;code&gt;node-1&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Monitor &lt;code&gt;node-1&lt;/code&gt; manager pod events.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl alpha events -n longhorn-system pod &amp;lt;node-1 manager pod&amp;gt; -w&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt; Update replica count to 1.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt; Should see &lt;code&gt;Normal&lt;/code&gt; replice delete event.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Normal    Delete                   Engine/t1-e-6a846a7a                                Removed unknown replica tcp://10.42.2.94:10000 from engine&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;And&lt;/em&gt; Should not see &lt;code&gt;Warning&lt;/code&gt; unknown replica detect event.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Warning   Faulted                  Engine/t1-e-6a846a7a                                   Detected replica UNKNOWN-tcp://10.42.1.98:10000 (10.42.1.98:10000) in error&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Test upgrade for migrated Longhorn on Rancher</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-upgrade-for-migrated-longhorn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/release-specific/v1.4.0/test-upgrade-for-migrated-longhorn/</guid>
      <description>&lt;h2 id=&#34;related-discussion&#34;&gt;Related discussion&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/longhorn/longhorn/discussions/4198&#34;&gt;https://github.com/longhorn/longhorn/discussions/4198&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: since few customers used our broken chart longhorn 100.2.1+up1.3.1 on Rancher (Now fixed) with the workaround. We would like to verify the future upgrade path for those customers.&lt;/p&gt;&#xA;&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Set up a cluster of Kubernetes 1.20.&lt;/li&gt;&#xA;&lt;li&gt;Adding this repo to the apps section in new rancher UI&#xA;&lt;ol&gt;&#xA;&lt;li&gt;repo: &lt;a href=&#34;https://github.com/PhanLe1010/charts.git&#34;&gt;https://github.com/PhanLe1010/charts.git&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;branch: release-v2.6-longhorn-1.3.1.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Access old rancher UI by navigating to &lt;code&gt;&amp;lt;your-rancher-url&amp;gt;/g&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Install Longhorn 1.0.2.&lt;/li&gt;&#xA;&lt;li&gt;Create/attach some volumes. Create a few recurring snapshot/backup job that run every minutes.&lt;/li&gt;&#xA;&lt;li&gt;Upgrade Longhorn to v1.2.4.&lt;/li&gt;&#xA;&lt;li&gt;Migrate Longhorn to new chart in new rancher UI &lt;a href=&#34;https://longhorn.io/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui/&#34;&gt;https://longhorn.io/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui/&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Upgrade to longhorn 100.2.1+up1.3.1 in the UI.&lt;/li&gt;&#xA;&lt;li&gt;Verify the upgrade would be stuck at with error:&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Patch CustomResourceDefinition &amp;#34;volumes.longhorn.io&amp;#34; in namespace&#xA;error updating the resource &amp;#34;volumes.longhorn.io&amp;#34;:&#xA;         cannot patch &amp;#34;volumes.longhorn.io&amp;#34; with kind CustomResourceDefinition: CustomResourceDefinition.apiextensions.k8s.io &amp;#34;volumes.longhorn.io&amp;#34; is invalid: spec.conversion.strategy: Invalid value: &amp;#34;Webhook&amp;#34;: must be None if spec.preserveUnknownFields is true&#xA;Error: UPGRADE FAILED: cannot patch &amp;#34;engineimages.longhorn.io&amp;#34; with kind CustomResourceDefinition: CustomResourceDefinition.apiextensions.k8s.io &amp;#34;engineimages.longhorn.io&amp;#34; is invalid: spec.conversion.strategy: Invalid value: &amp;#34;Webhook&amp;#34;: must be None if spec.preserveUnknownFields is true &amp;amp;&amp;amp; cannot patch &amp;#34;nodes.longhorn.io&amp;#34; with kind CustomResourceDefinition: CustomResourceDefinition.apiextensions.k8s.io &amp;#34;nodes.longhorn.io&amp;#34; is invalid: spec.conversion.strategy: Invalid value: &amp;#34;Webhook&amp;#34;: must be None if spec.preserveUnknownFields is true &amp;amp;&amp;amp; cannot patch &amp;#34;volumes.longhorn.io&amp;#34; with kind CustomResourceDefinition: CustomResourceDefinition.apiextensions.k8s.io &amp;#34;volumes.longhorn.io&amp;#34; is invalid: spec.conversion.strategy: Invalid value: &amp;#34;Webhook&amp;#34;: must be None if spec.preserveUnknownFields is true&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;Apply the &lt;a href=&#34;https://github.com/longhorn/longhorn/pull/4237#issuecomment-1195339461&#34;&gt;workaround&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Retry upgrade to longhorn 100.2.1+up1.3.1 in the UI.&lt;/li&gt;&#xA;&lt;li&gt;Verify the upgrade is ok.&lt;/li&gt;&#xA;&lt;li&gt;Verify that the user can successfully upgrade to future chart releases (e.g., Longhorn v1.3.2) from this version longhorn 100.2.1+up1.3.1.&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
