<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resiliency on Longhorn Manual Test Cases</title>
    <link>https://longhorn.github.io/longhorn-tests/manual/pre-release/resiliency/</link>
    <description>Recent content in Resiliency on Longhorn Manual Test Cases</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://longhorn.github.io/longhorn-tests/manual/pre-release/resiliency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[#2206](https://github.com/longhorn/longhorn/issues/2206) Fix the spinning disk on Longhorn</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/pre-release/resiliency/simulated-slow-disk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/pre-release/resiliency/simulated-slow-disk/</guid>
      <description>This case requires the creation of a slow virtual disk with dmsetup.&#xA;Make a slow disk:&#xA;Make a disk image file: truncate -s 10g slow.img Create a loopback device: losetup --show -P -f slow.img Get the block size of the loopback device: blockdev --getsize /dev/loopX Create slow device: echo &amp;quot;0 &amp;lt;blocksize&amp;gt; delay /dev/loopX 0 500&amp;quot; | dmsetup create dm-slow Format slow device: mkfs.ext4 /dev/mapper/dm-slow Mount slow device: mount /dev/mapper/dm-slow /mnt Build longhorn-engine and run it on the slow disk.</description>
    </item>
    <item>
      <title>PVC provisioning with insufficient storage</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/pre-release/resiliency/pvc_provisioning_with_insufficient_storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/pre-release/resiliency/pvc_provisioning_with_insufficient_storage/</guid>
      <description>Related Issue: https://github.com/longhorn/longhorn/issues/4654 https://github.com/longhorn/longhorn/issues/3529 Root Cause Analysis https://github.com/longhorn/longhorn/issues/4654#issuecomment-1264870672 This case need to be tested on both RWO/RWX volumes&#xA;Create a PVC with size larger than 8589934591 GiB. Deployment keep in pending status, RWO/RWX volume will keep in a create -&amp;gt; delete loop. Create a PVC with size &amp;lt;= 8589934591 GiB, but greater than the actual available space size. RWO/RWX volume will be created, and volume will have annotation &amp;ldquo;longhorn.io/volume-scheduling-error&amp;rdquo;: &amp;ldquo;insufficient storage volume scheduling failure&amp;rdquo; in it.</description>
    </item>
    <item>
      <title>Test Longhorn components recovery</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/pre-release/resiliency/test-longhorn-component-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/pre-release/resiliency/test-longhorn-component-recovery/</guid>
      <description>This is a simple test is check if all the components are recoverable.&#xA;Test data setup: Deploy Longhorn on a 3 nodes cluster. Create a volume vol-1 using Longhorn UI. Create a volume vol-2 using the Longhorn storage class. Create a volume vol-3 with backing image. Create an RWX volume vol-4. Write some data in all the volumes created and compute the md5sum. Have all the volumes in attached state. Test steps: Delete the IM-e from every volume and make sure every volume recovers.</description>
    </item>
    <item>
      <title>Test timeout on loss of network connectivity</title>
      <link>https://longhorn.github.io/longhorn-tests/manual/pre-release/resiliency/timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://longhorn.github.io/longhorn-tests/manual/pre-release/resiliency/timeout/</guid>
      <description>R/W Timeout Block Device Create a docker network: docker network create -d bridge --subnet 192.168.22.0/24 longhorn-network Start a replica: docker run --net longhorn-network --ip 192.168.22.2 \ -v /volume longhornio/longhorn-engine:&amp;lt;tag&amp;gt; \ longhorn replica --listen 192.168.22.2:9502 --size 10g /volume Start another replica: docker run --net longhorn-network --ip 192.168.22.3 \ -v /volume longhornio/longhorn-engine:&amp;lt;tag&amp;gt; \ longhorn replica --listen 192.168.22.3:9502 --size 10g /volume In another terminal, start the controller: docker run --net longhorn-network --ip 192.168.22.4 --privileged \ -v /dev:/dev -v /proc:/host/proc \ longhornio/longhorn-engine:&amp;lt;tag&amp;gt; \ longhorn controller --replica tcp://192.</description>
    </item>
  </channel>
</rss>
